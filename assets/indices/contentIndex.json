{
  "/": {
    "title": "💜 안녕하세요!",
    "content": "\r\n반갑습니다.\r\n\r\n생각과 지식의 관리에 관심이 있어 자료를 모으고 연결하며 정리하는 중입니다. \r\n\r\n행복한 날들 되시기를 기원합니다!\r\n\r\n",
    "lastmodified": "2023-02-23T10:01:58.8090712+09:00",
    "tags": null
  },
  "/about": {
    "title": "",
    "content": "# About me\r\n\r\n##### I have been working as a software engineer.\r\n\r\n##### I'm interested in knowledge management these days.\r\n\r\n##### I'm studying English.\r\n\r\n##### I have obtained an English Tourist Guide Certificate last year.\r\n\r\n##### I'm trying to be a good tourist guide!\r\n\r\n##### email to ellie.tguide@gmail.com\r\n",
    "lastmodified": "2023-02-22T14:00:58.170407+09:00",
    "tags": null
  },
  "/my-little-forest/": {
    "title": "",
    "content": "",
    "lastmodified": "2023-02-22T14:20:14.6627285+09:00",
    "tags": null
  },
  "/my-little-forest/0.-%EC%9D%B8%EC%83%9D-%EC%A7%80%EB%8F%84/2023%EB%85%84-%EB%82%98%EC%9D%98-%EA%B3%BC%EC%A0%9C%EB%93%A4": {
    "title": "2023년 나의 과제들",
    "content": "- 옵시디언 활용하여 세컨 브레인 구축하기([[Obsidian Tutorial]])\n- Flutter/Dart를 활용하여 서버구축, 웹, 앱 개발하기\n- Django/Python ? Flutter에서 커버 가능하다면 굳이 하지 않아도 될 것 같다. 일단 우선 순위 하위로 두기로 한다.\n- 옵시디언과 노션의 활용 방안 정리해서 체화하기\n\n#계획",
    "lastmodified": "2023-02-21T14:33:39.8725635+09:00",
    "tags": null
  },
  "/my-little-forest/1.-%EB%8F%85%EC%84%9C%EC%99%80-%EC%83%9D%EA%B0%81%EB%93%A4/": {
    "title": "독서와 생각들",
    "content": "\n",
    "lastmodified": "2023-02-22T13:55:20.4844893+09:00",
    "tags": null
  },
  "/my-little-forest/1.-%EB%8F%85%EC%84%9C%EC%99%80-%EC%83%9D%EA%B0%81%EB%93%A4/%EC%96%BC%EA%B5%B4%EC%82%AC%EC%A7%84-%EC%A0%9C%EB%8C%80%EB%A1%9C-%EC%B0%8D%EA%B8%B0": {
    "title": "얼굴사진 제대로 찍기",
    "content": "\n### 왜 필요한가\n\n소셜미디어 프로필, 이메일, 웹페이지 등등 어디에도 다 똑같이 활용하기 위한 사진이 필요하다. \n\n장기간 다양한 곳에 노출하여 사람들이 금세 알아볼 수 있도록 하기 위함이다.\n\n\n### 추천 방법 \n\n- 가능하면 전문 사진사, 최소한 사진 찍기 좋아하는 사람을 섭외하는 것이 좋다.  \n\n- 혼자 하더라도 매우 신중하게 한다.\n \n- 진짜 웃기는 일을 상상하면서 자연스럽게 웃는다.  호감을 줄 수 있는 사진이 나올 수 있도록.\n \n- 여러 각도에서 여러 장을 찍어서 가장 잘 나온 사진을 고른다.  \n \n- 고화질 버전도 확보하여 인쇄용 사진이 필요할 때 활용한다.\n",
    "lastmodified": "2023-02-23T08:55:32.1109831+09:00",
    "tags": null
  },
  "/my-little-forest/1.-%EB%8F%85%EC%84%9C%EC%99%80-%EC%83%9D%EA%B0%81%EB%93%A4/2023-02-09": {
    "title": "",
    "content": "# 옵시디언 사용법 공부중\n\n### 튜토리얼에서 배운 내용은 [[Obsidian Tutorial]]에 정리했다\n\n",
    "lastmodified": "2023-02-11T11:31:01.729+09:00",
    "tags": null
  },
  "/my-little-forest/1.-%EB%8F%85%EC%84%9C%EC%99%80-%EC%83%9D%EA%B0%81%EB%93%A4/Homo-Deus": {
    "title": "Untitled Page",
    "content": "---\ntitle: {\"title\"}\ndate: \"2023-02-21 14:34:10 \"\ntags: \naliases:\n---\n\n배고픔과 질병, 그리고 전쟁의 해결은 오랜 기간 인류가 해결해야하는 중요한 세 가지 과제였다.\n21세기 현재, 완전히는 아니지만 이 세 가지 문제는 더이상 인류의 위협이 되지 못하는 단계에 이르렀다.  그러면 그 다음으로 인류가 추구하는 과제는 무엇일까.  작자는 첫번째로 Homo Sapiens에서 Homo Deus로의 변환을 추구한다고 말한다.  인간을 넘어 신의 영역을 바라보게 되었다는 뜻이다. \n어떻게?  죽음을 극복하려는 노력을 통해서이다.\n21세기 인류의 평균 수명은 20세기초에 비해서 거의 두 배로 늘어났지만, 이것은 인간에게 주어진 수명이 늘어났다기 보다는 의학의 발달과 전쟁없는 오랜 기간 덕분에 인간 수명까지 살 수 있는 사람이 증가했다는 뜻이다.   오래 전에도 88세까지 살았던 사람도 있었고, 그것은 인간의 자연 수명이 그 정도는 된다는 증거이다.\n그런데, 구글 등 많은 기업에서 생명 연장의 과제를 수행하고 있고, 그 대표자들은 500년까지도 살 수 있다고 주장한다.  물론 그 시기는 2100년 혹은 2200년이라고도 말하긴 하지만, 2050년에 150세까지 수명을 연장하는 것이 가능하다는 주장도 있다.  \n수명 연장 기술이 개발되었을 때 건강하고, 그 시술을 받을 수 있는 돈만 있다면.  10년마다 세포를 재생하고, 눈과 두뇌 등을 업그레이드하여 10년을 살면, 그동안 기술은 더욱 발전하여 다시 10년을 더 살 수 있게 된다는 것이다.  (2/9/2023)\n\n두 번째로 인류가 추구하는 과제는 행복한 삶이라고 말한다.  고대 그리스의 철학자 에피쿠르스가 현세의 행복을 추구하는 것이 인생의 목표라고 말했다고 한다. 당시에는 별로 받아들여지지 않지만, 21세기에는 그의 주장이 기본적인 인간의 인생관으로 받아들여지고 있다.  현대 사회는 집단, 주로 국가의 평화와 풍요로움이 개개인의 행복에 끼치는 영향이 크다.   국가는 보다 풍족한 삶을 추구해 왔다.  그러나, 물질적 풍요가 반드시 구성원의 행복과 비례하지는 않는다.  (일인당 GDP56,000불의 싱가포르인보다 GDP14,000불의 푸에르토리코인이 더 행복하다는 예를 들었는데, 지금 조사해보니 싱가포르 64K [위키싱가포르](https://ko.wikipedia.org/wiki/%EC%8B%B1%EA%B0%80%ED%8F%AC%EB%A5%B4) , 푸에르토리코 31K였다 [위키푸에르토리코](https://ko.wikipedia.org/wiki/%ED%91%B8%EC%97%90%EB%A5%B4%ED%86%A0%EB%A6%AC%EC%BD%94).  요지는 바뀌지 않지만 그냥 확인차원)  \n행복을 추구할 권리는 미국 독립선언서에도 명시되어 있다.  천부인권은 생명, 자유, 그리고 행복 추구권이라는 것이다.  (나중에 찾아본 바로는 미국 헌법에 행복추구권은 없다고 한다.  당연한 권리라서 굳이 넣을 필요가 없다고 한다.  행복추구권을 헌법에 명시한 나라는 한국과 일본 뿐이라고 한다.)\n행복은 쉽게 얻을 수 있는 것이 아니다.  단순하게 뭔가를 추구한다고 얻어지는 것이 아니기 때문이다. 물질의 풍요로움과 쾌락의 추구는 길게 볼 때 행복이 아니라 불행을 가져온다. (2023-02-10)\n\n며칠이 지나니 위에서 연결되는 부분이 약간 모호하다.\n아무튼 인류가 현재 추진 중인 가장 중요한 과제는 바이오테크놀로지, 사이보그 기술, 그리고 생명과학이다.\n바이오테크놀로지는 마이크로 로봇이 혈관내부를 청소하거나 염증을 제거하는 등의 기술이고, 사이보그 기술은 우리몸 외부의 장치와 우리 몸, 정확히는 뇌를 연결해서 신체의 범위를 확장하는 기술이다.  생명과학은 유전자의 일부를 바꾸고 호르몬을 조작하는 등인간의 몸 자체를 바꾸려는 기술이다.  그렇게 바뀐 인간은 더이상 호모 사피엔스라고 부를 수 없는 존재일 것이다. (2023-02-16)\n\n생명과학은 서서히 발전해 가고 있기 때문에 하루아침에 모든 것이 달라지지는 않겠지만, 그 기간은 우리가 생각하는 것보다 훨씬 짧을 수도 있다.  인터넷이 처음 대중에 일반화된 것이 1990대 초반이었지만, 불과 20년만에 현재와 같은 상태가 되었고, 발전의 속도는 더욱 가속화 되고 있다.\n\n그러면, 그 속도를 낮추거나 제동을 걸 수는 없을까?  없다.  브레이크가 어디 있는지 모르기 때문이다.  각 분야의 발전 속도는 너무나 엄청나서 자신의 분야를 파악하는 것은 가능할지 몰라도, 다른 모든 분야에 대해서도 큰 그림을 파악하는 것은 불가능하다.  이미 발전의 속도는 개인이 따라잡기에는 불가능한 상태이다.\n\n우리와 다른 종이 만들어지는 것에 대해 막연한 두려움을 갖게 되지만, 그렇게 두려워하지 않아도 될지 모른다.  이미 우리는 조금씩 제어권을 넘기고 있다.  예를 들면 스마트폰을 좀 더 편리하게 사용하기 위해서 점점 많은 부분을 넘기는 것이나 의사의 처방전에 아무런 저항없이 호르몬을 조절하는 약을 먹는 것 등이 그런 행위이다. (2023-02-17)\n\n역사를 공부하는 이유는 내 행동을 바꾸기 위해서다.\n집앞에 잔디를 까는 관습은 오늘날 거의 모든 사람들의 기본 선택이지만, 이것은 사실 중세 프랑스 성주들이 자신의 부와 권력을 과시하기 위해서 시작되었다.  잔디를 푸르게 관리하기 위해서는 많은 노동력과 비용이 필요했기 때문이다.  그것이 브루조아 계급에게, 그리고 전동 잔디깎기가 보급된 오늘날은 일반인들에게까지 퍼져온 것이다.  이런 역사적 사실을 인지한다면 잔디가 아니라 다른형태로 집앞을 꾸미고 싶어질 수도 있다.  \n\n지식의 역설:\n사람들의 행동을 바꾸지 못하는 지식은 의미가 없는 지식이다.\n그런데, 사람들이 지식에 따라 행동을 바꾸게 되면 그 지식은 쓸모가 없어진다.\n\n매우 긴 서문(60페이지가 넘었슴)을 쓴 이유는 인류의 역사를 살펴봄으로써 우리의 행동을 어떻게 해야할지 얘기해보자는 것을 설득하려는 목적에서였다.  (2023-02-20)\n\n#morning #reading",
    "lastmodified": "2023-02-22T14:14:49.2853513+09:00",
    "tags": null
  },
  "/my-little-forest/1.-%EB%8F%85%EC%84%9C%EC%99%80-%EC%83%9D%EA%B0%81%EB%93%A4/How-to-Learn-to-Code": {
    "title": "Untitled Page",
    "content": "---\ntitle: {\"title\"}\ndate: \"2023-02-21 14:34:21 \"\ntags: \naliases:\n---\n\nby Quincy Larson\n\n### 기억에 남는 조언들\n\n- Tutorial Hell에 빠지지말고 일단 프로젝트를 시작하라\n \n- 얼굴사진(Headshot)을 제대로 찍어서 ([[얼굴사진 제대로 찍기]]) 소셜미디어와 모든 외부용 사진으로 사용하라 (이미지 각인). \n\n- 오픈소스에 기여하기 : [가이드북](https://www.freecodecamp.org/news/how-to-contribute-to-open-source-projects-beginners-guide/)\n\n- 개발자를 위한 컨텐츠 만들기 : 개발자수도 매우 많기 때문에 개발자를 위한 컨텐츠 개발도 전망이 좋다.\n\n- 프리랜서로서 지역의 작은 업체와 성공적인 프로젝트 경험 쌓기\n\n- 성공한 프로젝트가 있다면 이에 대한 짧은 동영상을 제작하는 것이 좋다.  데모로 시작하여 스크린 캡쳐가 들어간 2분 이내의 동영상이 효과적임.  2분 짜리는 트위터에 올릴 수도 있고, 자동재생이 되기 때문에 더 많은 사람들이 볼 수 있다. (BGM도 넣어서 흥미진진하게!) \n  \n  데모용 비디오 캡쳐링 툴 : QuickTime(MacOS), Game Recorder(Win), OBS\n  완벽해질 때까지 공들여서 몇 번이고 찍고 편집하여야 함.  그럴 가치가 있다.\n\n- \n#reading",
    "lastmodified": "2023-02-22T14:48:43.1851447+09:00",
    "tags": null
  },
  "/my-little-forest/2.-%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%B0%9C%EC%A0%84%EC%9D%84-%EC%9C%84%ED%95%B4/": {
    "title": "기술적 발전을 위해",
    "content": "\n",
    "lastmodified": "2023-02-22T13:53:57.5841718+09:00",
    "tags": null
  },
  "/my-little-forest/2.-%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%B0%9C%EC%A0%84%EC%9D%84-%EC%9C%84%ED%95%B4/%EC%98%B5%EC%8B%9C%EB%94%94%EC%96%B8-%EC%8A%A4%ED%84%B0%EB%94%94/": {
    "title": "옵시디언 스터디",
    "content": "\n",
    "lastmodified": "2023-02-22T13:53:06.3381089+09:00",
    "tags": null
  },
  "/my-little-forest/2.-%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%B0%9C%EC%A0%84%EC%9D%84-%EC%9C%84%ED%95%B4/%EC%98%B5%EC%8B%9C%EB%94%94%EC%96%B8-%EC%8A%A4%ED%84%B0%EB%94%94/%EA%B9%83%ED%97%88%EB%B8%8C%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-%ED%8D%BC%EB%B8%94%EB%A6%AC%EC%8B%9C%ED%95%98%EA%B8%B0": {
    "title": "Untitled Page",
    "content": "---\ntitle: {\"title\"}\ndate: \"2023-02-21 14:35:31 \"\ntags: \naliases:\n---\n    \n  \n### 기본 개념\n  \n원격 깃허브 저장소를 Netlify에 연동해 두면, Netlify가 깃허브 저장소의 업데이트 여부를 감지해서 내 페이지에 업데이트해 준다.  \n이것은 매우 편리한 기능이지만, 옵시디언 Vault를 로컬 깃허브 폴더 밖에 두면, 뭔가 수정을 할 때마다 매번 노트를 복사해야 하는 문제가 있다.\n  \nPush를 위해 하드디스크 어딘가 있는 Vault로부터 내 노트를 복사해서 로컬 깃허브 내부로 옮기는 것은 번거롭기도 하고 복사 과정에서 실수가 생길 수도 있다.  옵시디언 앱에서 수정을 하면 별다른 복사작업 없이 바로 원격 깃허브 저장소로 올릴 수 있도록 과정을 단순화시킬 필요가 있다. \n  \n  \n  \n  \n### 템플릿과 노트의 연결\n  \n템플릿에 따라 다르겠지만, 모든 템플릿에는 기본적으로 템플릿 자체를 구성하는 프로그램과 사용자가 작성한 노트를 저장하는 공간이 별도로 존재한다.  (Jekyll 템플릿에는 \"\\_note\",  MindStone 템플릿에는 \"posts\")\n  \n각 템플릿의 노트 저장 공간에 옵시디언 Vault를 만들면 별다른 작업없이 GitHub에 push하는 것만으로 최신 노트가 퍼블리시된다.\n옵시디언 설정 파일이라든지 노트 중에 퍼블리시하고 싶지 않은 내용 등은 push에서 제외하도록 한다.\n  \n작업 과정은 다음과 같다:\n  \n1. GitHub에서 로컬 폴더로 클론해 온 템플릿의 노트 복사 위치를 알아 둔다. \n2. 알아 둔 노트 복사 위치에 자신의 Vault 전체를 복사한다.  \n   (Vault 이름의 디렉토리째 복사)\n3. 옵시디언 앱에서 Vault open 메뉴에서 좀 전에 복사한 위치의 Vault를 열어 본다.\n4. 옵시디언 앱에서 자신 편집한 노트의 최종 버전이 보이면 복사는 성공이다.\n5. 이제 동작 테스트를 위해 새로운 메모를 추가하거나 편집한다.\n6. GitHub Desktop에 가보면 수정 사항이 발생했음을 알 수 있다.\n7. 퍼블리시 되지 않아야 하는 파일을 ignore 처리한다.  \n   (아래 [[깃허브를 이용해 퍼블리시하기#퍼블리시 되기를 원하지 않는 파일 처리]])\n8. Commit-Push한다. \n9. 잠시 후 자신의 페이지가 업데이트 되었는지 확인한다.\n  \n  \n  \n  \n### 퍼블리시 되기를 원하지 않는 파일 처리\n\n자신의 노트 중에서 퍼블리시 되기를 원하지 않는 내용이 있으면 gitignore 기능으로 처리할 수 있다.\n\n1. GitHub Desktop의 Repository-Repository Settings 메뉴를 선택한다.\n2. Ignored files를 선택한다.\n3. 여기에 올리지 않을 파일들을 나열한다.  \n   MindStone의 예를 들면:\\\n\t\\/posts/my-vault-name/.obsidian \\\n\t\\/posts/my-vault-name/개인자료/일기  \n4. 여기에 나열된 디렉토리/파일들은 git push에서 제외된다.\n  \n  \n  \n  \n### 리모트 저장소에 저장된 파일의 삭제 방법\n\n원하지 않았는데 실수로 한번 깃허브 저장소에 올라간 파일은 로컬 파일을 지우기 전에는 ignore해도 리모트에 계속 남아있게 된다.  이 경우, 다음 방법으로 리모트 파일이나 디렉토리를 삭제할 수 있다.\n\n핵심 명령어는 :  \n$ git rm -r --cached \"file-or-directory-to-be-removed\"  \n$ git commit -am 'Summary'  \n$ git push  \n\n자세한 내용은 [[Git 명령어]]를 참고.\n  \n  \n  \n  \n### 여러 곳에서 작업하는 경우의 고려 사항\n\n하나의 컴퓨터로만 작업하는 경우는 위에서 말한 방법으로도 괜찮지만,\n두 군데 이상에서 작업을 이어가고 싶은 경우, 깃허브 이외의 다른 동기화 방법을 생각해야 한다.\n깃허브에는 올라가지 않는 파일들이 있기 때문에 깃허브만으로는 원하는 환경을 얻을 수 없기 때문이다.\n\n메인이 되는 컴퓨터의 깃허브 로컬 저장소를 구글 드라이브에 연결하고,  다른 곳의 컴퓨터에서는 해당 폴더를 드라이브로 가져온 다음(그러면 환경에 따라 G:, H: 등의 드라이브가 생길 것이다), 옵시디언 앱에서 생성된 드라이브의 Vault를 오픈해서 진행하면 된다.\n\n이 방법의 제약은 두 번재 컴퓨터는 구글 드라이브와 연결되고, 깃허브와는 직접 연결되지 않기 때문에 퍼블리시는 첫번째 컴퓨터에서만 하거나, 두 번째 컴퓨터에 별도의 깃허브 로컬 저장소를 만들어서 사용해야 한다는 것이다.  두 번째에도 별도의 저장소를 관리하려면 또 다시 원본을 복사해야할 필요가 생긴다.  \n\n복잡함을 피하기 위해 퍼블리시는 첫 컴퓨터에서만 하는 걸 원칙으로 한다.  이미 두번째 컴퓨터에도 깃허브용 저장소는 만들어진 상태이므로 꼭 필요할 때는 복사해서 하면 된다.\n\n다른 방법도 있겠지만 별다른 가입 없이 현재 사용하고 있는 무료 계정을 이용해서 연결해 보았다.\n\n### 깃허브 사용시 주의할 점\n\n컴퓨터를 바꿔가며 깃허브와 작업할 경우, 새로운 컴퓨터에 오면 일단 pull을 먼저 해 놓고 시작하기  \n\npull을 하지 않고 작업하면 GitHub Desktop에서 'Stash'해놓고 pull한 다음에 다시 restore하기를 유도하기는 한다.\n\n#옵시디언사용팁 ",
    "lastmodified": "2023-02-22T14:10:32.3871964+09:00",
    "tags": null
  },
  "/my-little-forest/2.-%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%B0%9C%EC%A0%84%EC%9D%84-%EC%9C%84%ED%95%B4/%EC%98%B5%EC%8B%9C%EB%94%94%EC%96%B8-%EC%8A%A4%ED%84%B0%EB%94%94/%EB%8F%99%EA%B8%B0%ED%99%94": {
    "title": "동기화",
    "content": "\n# 회사와 집에서 같이 액세스\n\n### 방법은 다음과 같다\n\n1. 회사에서 : 구글 드라이브 앱을 통해서 나의 옵시디언 작업 폴더 (F:\\Home\\Obsidian)를 구글 드라이브에 링크 \n2. 그러면 G: 드라이브가 생기고, 내 작업 폴더가 여기에 링크됨\n3. 집에서 : 구글 드라이브 앱을 설치[[동기화#^9b2ac2]]하고, 탐색기에서 열기를 하면 G:에 구글 드라이브가 생김\n4. 옵시디언을 설치하고 Open 메뉴에서 G:에 있는 기존 옵시디언 파일폴더(my little forest)를 선택하니 동일한 파일이 열린다!!\n5. 지금 이 파일을 저장하고 내일 회사에서도 똑같이 열리는지 확인하면 싱크 작업도 되는거다!\n6. 회사에서 확인함.  잘 동작한다.  이제 집과 회사에서 모두 옵시디언을 업데이트 할 수 있게 되었다!\n\n\n### 배운 점\n처음 집에서 구글 드라이브 앱을 설치하려고 했더니 다운로드 버튼은 없고 모든 장치에서 사용할 수 있다고 나옴\n![](images/gooledrive1.png)\n\nimages/gooledrive1.png로 시도 :\\\n![구글이미지](/content/my little foret/images/googledrive1.png)\n\nimages/gooledrive1.png\n브라우저에서는 보였지만 옵시디언 앱에서 열기 위해서는 내 컴퓨터의 드라이브로 가져와야 했기 때문에 확인한 결과 \n[https://www.google.com/drive/download/](https://www.google.com/drive/download/)  에서 다운받을수 있었다. ^9b2ac2\n\n#옵시디언사용팁 ",
    "lastmodified": "2023-02-23T09:23:20.5077483+09:00",
    "tags": null
  },
  "/my-little-forest/2.-%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%B0%9C%EC%A0%84%EC%9D%84-%EC%9C%84%ED%95%B4/%EC%98%B5%EC%8B%9C%EB%94%94%EC%96%B8-%EC%8A%A4%ED%84%B0%EB%94%94/%EC%97%86%EB%8A%94-%EB%A9%94%EB%AA%A8": {
    "title": "Untitled Page",
    "content": "---\ntitle: {\"title\"}\ndate: \"2023-02-09 14:35:43 \"\ntags: \naliases:\n---\n\n이 메모는 내가 직접 만든 것이 아니라 다른 메모에서 이중 브라켓을 적고 그 안에 '없는 메모'라는 이름을 넣은 후 클릭했더니 만들어진 메모이다.\n\n#옵시디언사용팁 ",
    "lastmodified": "2023-02-22T14:11:52.4048898+09:00",
    "tags": null
  },
  "/my-little-forest/2.-%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%B0%9C%EC%A0%84%EC%9D%84-%EC%9C%84%ED%95%B4/%EC%98%B5%EC%8B%9C%EB%94%94%EC%96%B8-%EC%8A%A4%ED%84%B0%EB%94%94/%EC%98%B5%EC%8B%9C%EB%94%94%EC%96%B8%EC%9D%98-%ED%85%9C%ED%94%8C%EB%A6%BF-%EA%B8%B0%EB%8A%A5": {
    "title": "Untitled Page",
    "content": "---\ntitle: {\"title\"}\ndate: {YYYY-mm-DD}\ntags: \naliases: \n---\n\n### 개요\n\nFront matter 처럼 노트에 반복적으로 추가할 내용이 있다면 미리 템플릿으로 만들어 두고 추가하면 편리하다.\n\n### 방법\n\n- 먼저 템플릿을 모아둘 폴더를 하나 만든다 :\\\n  templates\n-  템플릿 폴더 내에서 템플릿 노트(.md 파일)를 작성한다.  \n-  이 노트에는 원하는 내용을 넣는다.  \\\n  예 :\\\n`---`\\\ntitle: {\"title\"}\\\ndate: {YYYY-mm-DD}\\\ntags: \\\naliases: \\\n`---`\n\n- 필요한 만큼 템플릿 노트를 만든다: \\\n  frontmatter-template, \\\n  footer-template, \\\n  etc...\n- 이제 템플릿 폴더를 등록한다 : \\\n  Settings - Templates 메뉴에서 Template folder location에 등록\n- 노트 작성할 때 왼쪽 버튼바에서 Insert template 아이콘을 눌러 원하는 템플릿을 선택한다.\n\n#옵시디언사용팁 ",
    "lastmodified": "2023-02-23T09:51:39.1904756+09:00",
    "tags": null
  },
  "/my-little-forest/2.-%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%B0%9C%EC%A0%84%EC%9D%84-%EC%9C%84%ED%95%B4/%EC%98%B5%EC%8B%9C%EB%94%94%EC%96%B8-%EC%8A%A4%ED%84%B0%EB%94%94/%ED%8D%BC%EB%B8%94%EB%A6%AC%EC%8B%9C-%EC%88%98%EC%A0%95%ED%95%98%EA%B3%A0-%EC%8B%B6%EC%9D%80-%EC%A0%90%EB%93%A4": {
    "title": "Untitled Page",
    "content": "---\ntitle: {\"title\"}\ndate: \"2023-02-10 14:35:47 \"\ntags: \naliases:\n---\n\n1. 왼쪽 메뉴에 나오는 파일명에서 확장자가 안보이게\n2. 왼쪽 메뉴에는 about.md, index.md 안나오고 my little forest의 아랫 폴더부터 나오도록 수정하자.\n3. 태그로 소팅해서 보여주기\n4. 댓글 달수 있도록\n5. 문서 맨 위에 문서제목 자동으로 보이게 만들기 (옵시디언 앱처럼)\n6. Collapse all과 Expand all 기능 넣기\n7. 노트를 클릭해서 불러와도 그래픽 뷰는 리프레시가 안됨 (브라우저 릴로드를 해야함)\n8. 리프레시할 때 collapse되어 버리는 문제\n9. ",
    "lastmodified": "2023-02-22T14:12:31.1863697+09:00",
    "tags": null
  },
  "/my-little-forest/2.-%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%B0%9C%EC%A0%84%EC%9D%84-%EC%9C%84%ED%95%B4/%EC%98%B5%EC%8B%9C%EB%94%94%EC%96%B8-%EC%8A%A4%ED%84%B0%EB%94%94/Netlify-%EC%9D%B4%EC%9A%A9%ED%95%A0-%EB%95%8C-%EC%95%8C%EC%95%84%EB%91%90%EB%A9%B4-%EC%A2%8B%EC%9D%80-%EC%A0%90%EB%93%A4": {
    "title": "Untitled Page",
    "content": "---\ntitle: {\"title\"}\ndate: \"2023-02-11 14:35:52\"\ntags: \naliases:\n---\n\n시작은 무료로 제공하고 사용량에 따라 청구를 한다.  (합리적이라고 생각됨)\n\n### 무료 사용 범위 :\n1. 멤버 수 : 1명 \\\n   (2명부터는 1명당 $15/월)\n\n2. 동시 빌드 수 : 1 \\\n   (이건 그렇게 제공하는 것이므로 그냥 기다리면 됨)\n\n3. 허용량 : 100GB/월 \\\n   (초과분은 $55/100GB, 개인용으로는 충분할 듯) \n\n4. 빌드 시간 : 300분/월 \\\n   (그 이후는 $7.00/500분.  약간 조심해야할 듯.  며칠만에 63시간이나 썼다.  그래도 비교적 저렴하게 쓸 수 있으니 초반에 스터디할 때는 부담없이 쓰자!)\n\n![](images/tempsnip.png)\n\n#옵시디언사용팁 ",
    "lastmodified": "2023-02-22T14:13:34.4246232+09:00",
    "tags": null
  },
  "/my-little-forest/2.-%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%B0%9C%EC%A0%84%EC%9D%84-%EC%9C%84%ED%95%B4/%EC%98%B5%EC%8B%9C%EB%94%94%EC%96%B8-%EC%8A%A4%ED%84%B0%EB%94%94/Obsidian-%EA%B9%8A%EA%B2%8C-%EC%95%8C%EC%95%84%EA%B0%80%EA%B8%B0": {
    "title": "Untitled Page",
    "content": "---\ntitle: {\"title\"}\ndate: \"2023-02-11 14:35:59 \"\ntags: \naliases:\n---\n\n# 새롭게 알게 된 점들\n\n### Link to a heading\n특정 메모의 특정 헤딩에 링크하려면 [[Obsidian Tutorial#5/6 : 8 Hotkeys You Need]]  메모 제목의 끝에 해시태그 표시를 하고 원하는 헤딩을 선택하면 된다. \n헤딩이 하위레벨을 가지고 있으면 또 해시태그를 붙여서 선택가능하다, 이렇게...\n[[Obsidian Tutorial#5/6 : 8 Hotkeys You Need#하위제목]]\n\n\n### Link to a block in a note\n특정 블럭을 링크하고 싶으면 링크를 거는 노트 제목끝에 해시태그와 캐럿(^)을 붙인다. 이렇게..\n[[Obsidian Tutorial#^cb1458]]\n자동으로 블럭 identifier가 추가된다.\n블럭에 이름을 정해주고 링크하고 싶으면 원하는 블럭 끝에다 blank^quote-name 으로 지정한 후에 해당 블럭명을 선택해도 된다 : [[Obsidian Tutorial#^quote-named-by-me]]\n\n\n\n\n\n# 궁금한 점들\n\n### 회사와 집의 컴에서 모두 작업할 수 있는 방법은?\n--\u003e 구글 드라이브 이용해서 성공함! [[동기화]]\n\n### quote이름을 바꿀때 관련된 모든 내용이 씽크되는 방법은?\n\n### 외부 링크를 거는 방법\n싱글 브래킷 안에는 보일 내용을, 바로 이어진 괄호안에는 링크 URL을 적으면 된다.\n이렇게... [위키싱가포르](https://ko.wikipedia.org/wiki/%EC%8B%B1%EA%B0%80%ED%8F%AC%EB%A5%B4)\n\n### 외부 소스를 노트 안에 넣는 방법\n다음과 같은 방법으로 하면 된다.  (실제 소스는 편집모드가 아닐때는 안보이므로 눈에 보이도록 각 글자마다 블랭크를 넣음)\n\u003c i f r a m e   s r c = \"INSERT YOUR URL HERE\" \u003e \u003c / i f r a m e \u003e\n만일 위키 싱가포르 페이지를 넣고 싶다면..\n\u003ciframe src=\"https://ko.wikipedia.org/wiki/%EC%8B%B1%EA%B0%80%ED%8F%AC%EB%A5%B4\"\u003e\u003c/iframe\u003e\n\n여러 가지 attribute를 원하는 크기,방식을 정할 수도 있다.\nname, width/height, sandbox 등의 attribute 사용가능\n\u003ciframe src=\"https://ko.wikipedia.org/wiki/%EC%8B%B1%EA%B0%80%ED%8F%AC%EB%A5%B4\" name=\"싱가포르\" width=\"500px\" height=\"100px\" sandbox=\"allow-presentation\"\u003e\u003c/iframe\u003e\n\n\n### 깃허브를 이용하여 퍼블리시하기\n두 가지 템플릿을 테스트 했는데, 간단버전 (Jekyll 템플릿) 은 심플해서 보기 좋긴 했지만, 나중에 복잡해지면 너무 체계가 없을 것 같아서 기존 블로그와 좀더 비슷한 포맷의 MindStone 템플릿을 사용하기로 했다.\nNetlify라는 클라우드 서비스를 이용해서 퍼블리시 했다. \n현재 구글 드라이브로 연동되는 폴더를 다시 깃허브에 연동시켜서 수정 내용을 퍼블리시하는 방법을 시험 중이다.\n자세한 내용은 여기서..[[깃허브를 이용해 퍼블리시하기]]\n\n\n### Footnote 만들기\n풋노트를 만들려면 브래킷안에 캐럿과 번호를 쓰면 된다.  이렇게.. [^1]\n또, 번호가 아닌 단어로 여러 줄의 풋노트를 만들 수도 있다. [^bignote]\n그리고 어딘가에 그 설명을 추가한다.\n\n[^1]: 이것이 풋노트 1번의 설명이에요.\n[^bignote]: 이것이 여러줄 풋노트이다\n   인덴트를 넣어서 이 패러그래프가 풋노트에 포함되고 있음을 알린다.\n   얼마든지 추가해도 됨\n\n\n#옵시디언사용팁 ",
    "lastmodified": "2023-02-22T14:14:13.6922647+09:00",
    "tags": null
  },
  "/my-little-forest/2.-%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%B0%9C%EC%A0%84%EC%9D%84-%EC%9C%84%ED%95%B4/%EC%98%B5%EC%8B%9C%EB%94%94%EC%96%B8-%EC%8A%A4%ED%84%B0%EB%94%94/Obsidian-Tutorial": {
    "title": "Untitled Page",
    "content": "---\ntitle: {\"title\"}\ndate: 2023-02-21 14:36:07 \ntags: \naliases:\n---\n\n# 옵시디언 스터디\n\n2023년 2월 9일.  드디어 옵시디언을 설치했다.\n세컨 브레인을 만드는데 활용하기 위한 툴 옵시디언!\n\n유튜브에서 [초보자를 위한 튜토리얼](https://youtube.com/playlist?list=PL3NaIVgSlAVLHty1-NuvPa9V0b0UwbzBd) 을 찾았다.  \n기본 내용은 6개의 클립으로 나뉘어있다.\n\n참, 옵시디언은 흑요석이라고 한다.  영어로는 volcanic glass\nObsidian is a naturally occurring volcanic glass that is formed when molten rock cools rapidly.\n\n\n### 1.  시작하기\n\n유튜브 튜토리얼은 맥인거 같은데..  윈도버전은 맥하고 ui가 좀 다르다?\n내부 링크를 걸 수가 있다.  즉 옵시디언 관련 메모를 보려면 이렇게..  [[Obsidian Tutorial]]  (브래킷을 2개 적으면 후보가 나타남. 지금은 다른 노트가 없는 상태라서 현재 노트를 써넣었슴)\n만약에 없는 메모를 만들고 싶으면 아무거나 적으면 메모가 생겨남\n즉, [[없는 메모]] 이렇게 하면 클릭하는 순간 없는 메모가 생겨난다.\n\n\n### 2.  Markdown 작성에서 중요한 6개의 중요한 점\n\n- The Link : 2개의 브래킷 [[동기화]]  ^cb1458\n- The Tag :  hashtag symbol을 사용함 #옵시디언사용팁   ^f7fb7c\n- Italic : 이탤릭체로 강조하고 싶을 때 *아스타리스크*를 이용하면 됨 single asterisk ^quote-named-by-me\n- Bold :  볼드체로 강조하고 싶을 때 **아스타리스크**를 이용하면 됨 double asterisks\n- Lists :  앞에 하이픈 + space를 넣으면 됨 (이 리스트에 적용해봄)  하이픈 대신 번호를 붙이면 번호 리스트가 된다.\n- Headers : hashtag symbol + space를 이용하면 됨. 하나는 큰제목, 여러 개는 서브헤더가 됨\n\n### 3.  8가지 중요한 설정\nEditor  \n1. Spell check\n\nPlug-ins\n1. Tag pane\n2. Page preview\n3. Starred\n\nFile\n1. Deleted files\n2. **Always Update Internal Links**\n\nAppearance\n1. Light/Dark mode\n2. Custom CSS\n\nWrite, think, and link\n\n### 4.  Custome Themes\n\n### 5.  8 Hotkeys You Need\n1. 에디트 모드에서 링크로 가기 : cmd+link(Mac), Ctrl+link(Win)\n2. Toggle edit/preview (Ctrl-e)\n3. Open quick switcher (Ctrl-o)\n4. Search (Ctrl-f)\n5. Back (Ctrl-Alt-leftarrow)\n6. Forward (Ctrl-Alt-rightarrow)\n7. New note (Ctrl-n)\n8. Open note in new window (Ctrl-Alt-click list)\n##### 하위제목 테스트\n\n\n### 6.  마무리\n바로 시작하라!\n\n\n### 동기화 방법\n나는 회사와 집에서 사용하고 싶기 때문에 구글 드라이브에서 동기화하기로 했다.\n[[동기화]]에서 과정을 자세히 설명\n\n\n\n#옵시디언사용팁",
    "lastmodified": "2023-02-22T14:47:35.7894343+09:00",
    "tags": null
  },
  "/my-little-forest/2.-%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%B0%9C%EC%A0%84%EC%9D%84-%EC%9C%84%ED%95%B4/BuildingTemplate/": {
    "title": "템플릿 만들기",
    "content": "\n",
    "lastmodified": "2023-02-23T08:56:58.4848141+09:00",
    "tags": null
  },
  "/my-little-forest/2.-%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%B0%9C%EC%A0%84%EC%9D%84-%EC%9C%84%ED%95%B4/BuildingTemplate/%EC%95%84%EB%A9%94%EC%8B%9C%EC%8A%A4%ED%8A%B8-%ED%85%9C%ED%94%8C%EB%A6%BF": {
    "title": "Untitled Page",
    "content": "---\ntitle: {\"title\"}\ndate: {YYYY-mm-DD}\ntags: \naliases: \n---\n\n이 문서는 [Amethyst Getting Started](https://amethyst.bencuan.me/setup/setup/)를 참조하고, 실제 적용하면서 나타난 이슈들을 정리한 것이다. \n\n\n### 설치\n\n1. 템플릿을 나의 깃허브 저장소에 복사(fork)한다.\n2. 내 컴퓨터(로컬 저장소)로 가져온다 (clone)\n\n### 첫번째 작업 \n\n- 첫 페이지 :\\\n  퍼블리시할 내용은 /content 폴더에 들어가게 된다.\n  메인 홈 페이지 문서는 /content/\\_index.md 라는 이름이므로, 이 문서를 원하는 내용으로 편집한다.\n\n- 상대 경로 :\\\n  모든 링크는 /content를 root로 생각해야 한다.\n  즉, 만일 내가 `setup/config.md`라는 파일을 연결하고 싶다면 `[config로 링크](setup/config.md)` 라고 써야 한다.\\\n  또, 이미지는 /content 폴더 어딘가에 두면 된다.\n  \n\n### 노트 작성시 Front matter 넣기\n\n각 노트의 맨 앞에 해당 노트의 성격과 정보를 적어 두는 것을 Front matter라고 한다.  예를 들면:\n`---\ntitle: {\"title\"}\ndate: {YYYY-mm-DD}\ntags: \naliases: \n---`\n\n이렇게 써 두는 것이다.\nFront matter를 [[옵시디언의 템플릿 기능]]으로 설정해 두면 새로 노트를 작성할 때 'Insert template' 버튼으로 쉽게 추가할 수 있다.\n\nFront matter에 들어갈 수 있는 다른 정보들을 살펴보자:\n\n\n- 설정된 섹션 외부의 페이지나 docs가 아닌 섹션을 렌더링 하고 싶으면 type을 docs라고 설정한다.\ntype = 'docs'\n\n- BookMenuBundle이 set되지 않은 경우, 파일 트리 메뉴의 항목을 재정렬할 가중치를 설정한다.\nweight = 10\n\n- BookMenuBundle이 set되지 않은 경우, 파일 트리 메뉴를 플랫 섹션으로 표시하려면 true로 설정한다.\nbookFlatSection = false\n\n- 해당 수준에서 하위 섹션이나 페이지를 숨기는 설정으로 file-tree menu mode에서만 동작\nbookCollapseSection = true\n\n- (Optional) Set true to hide page or section from side menu (if BookMenuBundle not set)\nbookHidden = false\n\n# (Optional) Set 'false' to hide ToC from page\nbookToC = true\n\n# (Optional) If you have enabled BookComments for the site, you can disable it for specific pages.\nbookComments = true\n\n# (Optional) Set to 'false' to exclude page from search index.\nbookSearchExclude = true\n\n# (Optional) Set explicit href attribute for this page in a menu (if BookMenuBundle not set)\nbookHref = ''\n\n  \n\n### config.yaml 수정 작업\n\nconfig.yaml은 전체적인 \n\n",
    "lastmodified": "2023-02-23T10:01:10.069245+09:00",
    "tags": null
  },
  "/my-little-forest/2.-%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%B0%9C%EC%A0%84%EC%9D%84-%EC%9C%84%ED%95%B4/BuildingTemplate/%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%A7%8C%EB%93%A4%EA%B8%B01-%EC%A7%80%ED%82%AC-%ED%85%8C%EB%A7%88": {
    "title": "Untitled Page",
    "content": "---\ntitle: {\"title\"}\ndate: \"2023-02-21 14:34:29 \"\ntags: \naliases:\n---\n\n### 배경\n\n옵시디언에 빠져서 세컨브레인 작업을 하고 있다.\n자바스크립트로 된 템플릿으로 퍼블리시를 해보았는데 [수정하고 싶은 부분이 많아서](\"../옵시디언 스터디\\/퍼블리시 수정하고 싶은 점들.md\") 프로젝트로 옮겨 놓고 스터디를 하고 있었다. \n\n그러다가 어제 우연히 맘에 드는 템플릿을 찾게 되었는데 TypeScript로 되어 있었고, 기존 퍼블리시한 템플릿 보다는 이 템플릿에서 시작하여 맘에 드는 템플릿을 만들자고 방향을 잡았었다.\n\n그런데.. 오늘 그 작업을 진행하려고 이런 저런 조사를 좀 하다보니..\n원래 별로라고 생각했던 Jekyll 이라는 템플릿이 엄청난 사용자와 플러그인, 테마 등의 에코시스템을 갖춘 대단한 프로젝트였다는 사실을 알게 됐다.\n\n결국, 루비로 만들어진 지킬 템플릿에서 작업을 시작하는 것이 낫겠다는 결론을 내렸다.  어차피 나는 자바스크립트도 모르고 루비도 모르니까 양쪽 다 새로 배워야 하는데, 좀 더 리소스가 풍부한 쪽으로 하는 편이 낫겠다는 판단에서다.\n\n그래서 이렇게 루비까지 오게 되었다.\n\n\n\n### 설치 및 로컬서버 구동\n\n1. GitHub repo create \n2. Clone to local\n3. Ruby with Devkit install (to C: 아직 100기가정도 있다.)\n4. gem install jekyll 로 jekyll jem을 설치\n5. Bundler로 Ruby gem dependency 관리 : Jekyll 테마가 설치된 위치로 이동 후 \\\n   gem install bundler\\\n   bundle init\\\n   Gemfile 편집 : Github page를 사용하지 않으면 해당 라인 코멘트아웃\\\n   bundle install\\\n 6. 테마 빌드 : \\\n    bundle update\\\n    bundle exec jekyll serve --\u003e 로컬 서버가 생김 (http://127.0.0.1:4000) \n\n![[Jekyll-theme1.png]]\n\n### 빌드\n\n일단 \\_config.yml file을 수정해서 이런 명령으로 빌드해 보았다 :\n$ bundle exec jekyll build\n\n뭔가 빌드가 되고, auto-regeneration을 enable하려면 --watch를 쓰라는 메시지가 나왔다.\n\n그래서 ...\n$ bundle exec jekyll serve --watch\n명령으로 서버를 다시 띄웠는데 변경사항이 적용되지 않았다.\n\n디렉토리를 보니 build.sh 파일이 있다.\n일단 실행해 봤는데 docker가 없다는 에러 발생.\n\n그래서 [Docker Desktop for Windows](https://docs.docker.com/desktop/install/windows-install/)를 설치했다. (버전 4.16.3)\n\n설치 후 build.sh을 다시 실행했는데..\n$ ./build.sh\nthe input device is not a TTY.  If you are using mintty, try prefixing the command with 'winpty'\n\n이런 결과물이 나오긴 했지만 수정 내용은 적용이 된 것이 보인다.\n\n한 가지 원인이 불분명하지만 결과가 확인된 것은, 위에서 변경 사항이 적용되지 않았던 bundle exec jekyll build로도  Docker를 설치한 이후에는 적용이 되고 있다는 점이다.\n\n이렇게 설치와 빌드 작업은 마무리되어 로컬에서 테스트 환경이 만들어졌다.\n\n#템플릿만들기 #테크니컬팁 ",
    "lastmodified": "2023-02-22T15:17:45.9787671+09:00",
    "tags": null
  },
  "/my-little-forest/2.-%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%B0%9C%EC%A0%84%EC%9D%84-%EC%9C%84%ED%95%B4/BuildingTemplate/%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%A7%8C%EB%93%A4%EA%B8%B02-%EC%A4%91%EA%B0%84%EC%A0%90%EA%B2%80": {
    "title": "Untitled Page",
    "content": "---\ntitle: {\"title\"}\ndate: {YYYY-mm-DD}\ntags: \naliases: \n---\n\n## 중간 점검\n\nJekyll Documentation Theme을 선택하고 일단 빌드하는 것까지 따라왔지만 조금 어수선하므로, 정리하는 차원에서 Getting Started문서를 정리해 본다\n\n### 테마를 빌드하는 방법\n1. Download the theme\n2. Install Jekyll\n3. Install Bundler\n4. Build the Theme\\\n   - Option 1: GitHub 페이지를 이용하지 않고 퍼블리시하는 경우\\\n     Gemfile, Gemfile.lock을 삭제하고\\\n     gem install jekyll\\\n     jekyll serve로 서비스한다.\n   - Option 2: GitHub 페이지에 퍼블리시하는 경우\\\n     bundle update\\\n     bundle exec jekyll serve로 서비스한다.\n\n \n### Docker에서 사이트 서비스하기\nDocker를 이용해서 직접 빌드하고 서비스할 수도 있다:\n   docker-compose build --no-cache \u0026\u0026 docker-compose up \n   (내 컴에서 이 방법은 에러 발생함 no valid drivers found...)\n\n\n### 사이드바 설정하기\n이 테마에는 몇 가지 제품이 있고, 각 제품마다 별도의 사이드바가 생긴다. \n특정 제품에 관해 읽을 때는 그 제품에 대한 사이드바가 있는 쪽이 편리하기 때문이다.   맨위쪽의 메뉴바는 전체 제품을 볼 수 있도록 동일하게 되어 있다.\n\n각 페이지의 앞쪽에 그 페이지가 사용할 사이드바를 명시해야 한다.\n\n예제:\ntitle: Alerts\ntags: [formatting]\nkeywords: notes, tips, cautions, warnings, admonitions\nlast_updated: July 3, 2016\nsummary: \"You can insert notes, tips, warnings, and important alerts in your content. These notes are stored as shortcodes made available through the linksrefs.hmtl include.\"\nsidebar: mydoc_sidebar\npermalink: mydoc_alerts\n\n예제의 sidebar: mydoc_sidebar는 \\_data/sidebars/mydoc_sidebar.yml 파일을 가리킨다.\n\n사이드바는 최대 2레벨을 가지는데, 탑라인 메뉴까지 포함하면 실제로는 3단계가 되면, 더 이상의 레벨은 활용도가 떨어진다고 한다.\n\n사이드바에 대한 설정은 폴더 별로  다르게 만들 수 있다.\n\n\n### 탑 메뉴 (Top navigation)\n\n전체 페이지에 동일하게 적용되므로 \\_config.yml 파일에 들어있다.\n\n\n### 사이드바 Syntax\n\nYAML 문법과 요구 패턴을 정확히 따라야 한다 :\n- 각 folder, subfolder에는 title, output 항목이 꼭 있어야 한다.\n- 각 folderitem, subfolderitem에는 title, url, ouput 항목이 꼭 있어야 한다.\n- Output에는 web과 pdf 의 두 가지 경우가 가능하다. PDF로 퍼블리시하지 않는다고 하더라도 output: web을 명시해야 한다.\n- YAML은 정확한 스페이싱에 기초하므로 제시된 패턴을 정확히 따라야 한다. \\\n  (스페이스가 하나라도 빠지게 되면 YAML 에러때문에 전체 빌드가 안되는 문제가 발생함)\n- 각 단계는 다음 단계로 내려가기 전에 반드시 하나 이상의 topic을 가져야 함.\n\n### 코멘트\n\n이 테마에는 각 페이지마다 댓글을 위해 [Commento.io](https://commento.io/)를 통합하고 있다.  Disqus 등과 달리 광고를 만들지 않는다.  다만, 이것을 사용하려면 $5/월을 지불해야한다.   '\\_config.yml'에서 comments: false로 만들면 코멘트 관련 내용이 빠지게 된다.\n\n### 상대적 링크와 오프라인 보기\n\n이 테마는 상대적 링크를 사용하고 있으므로 오프라인에서도 볼 수 있다. \n\n### 페이지 전문 (Page frontmatter)\n\n각 페이지마다 다음 내용을 포함해야 한다 :\n\n---\ntitle: \"Some title\"\ntags: [sample1, sample2]\nkeywords: keyword1, keyword2, keyword3\nlast_updated: Month day, year\nsummary: \"optional summary here\"\nsidebar: sidebarname\npermalink: filename.html\n\n---\n\n\n- title: 인용부호는 안해도 되지만 제목에 콜론이 있다면 인용부호가 필요하다. \\\n  또, 제목 안에 인용부호가 있다면 부호 앞에 백슬래시 \\ 를 넣어야한다.\n- keywords: SEO(Search Engine Optimization)를 위한 값\n- tags: \\_data/tags.yml 안에 들어있어야 한다. 또, pages/tags/에도 상응하는 태그 파일이 있어야 한다.  Jekyll이 태그 파일을 자동 생성하지는 않기 때문이다.\n\n\n### 문서 토픽 저장장소\n\n각 제품에 해당되는 문서는 \\_pages 내의 하위 폴더로 저장할 수 있다. \n\n\n### 탑메뉴 설정\n\n 탑 메뉴는 \\_data/topnav.yml에서 설정할 수 있다.\n\n### PDF 생성\n\nPDF 생성을 위해서는 [Prince XML](https://www.princexml.com/) 라이센스가 필요하다.  윈도우즈에서 사용중이라면 일반 커맨드창보다는 Git Bash의 사용을 권한다.\n\n### Blogs / News\n\n블로그 포스팅은 마크다운 파일을 \\_posts 폴더 아래 만든다.  파일명은 항상 날짜로 시작한다 (YYYY-MM-DD-title).\n\nnews/news.html은 포스트를 보여주고, news_archive.html은 연간 로그를 보여준다.\n\n\n### Markdown\n\nkramdown markdown 표준을 사용하고 있다. \n패러그래프나 노트, 코드 조각을 보여 주거나 리스트 항목 사이에 뭔가 넣고 싶을 때는 4개의 스페이스로 인덴트한다.\n\n1.    첫번째 항목\n       ```\n       alert(\"hello\");\n       ```\n\n2.    두번째 항목\n   \n       두번째 줄\n3.     세번째 항목\n\n\n### 자동 링크 (Automated links)\n\n링크관리를 자동으로 하고 싶으면 [Automated Links](http://127.0.0.1:4000/mydoc_hyperlinks.html#automatedlinks)항목을 참고하라.\n\n",
    "lastmodified": "2023-02-22T14:16:13.4282345+09:00",
    "tags": null
  },
  "/my-little-forest/2.-%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%B0%9C%EC%A0%84%EC%9D%84-%EC%9C%84%ED%95%B4/BuildingTemplate/%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%A7%8C%EB%93%A4%EA%B8%B03-%EC%97%AC%EB%9F%AC-%EA%B0%80%EC%A7%80-%ED%85%9C%ED%94%8C%EB%A6%BF": {
    "title": "Untitled Page",
    "content": "---\ntitle: {\"title\"}\ndate: \"2023-02-21 14:34:38 \"\ntags: \naliases:\n---\n### 기준 템플릿 변경\n\n이틀동안 설치하고 빌드했던 템플릿이 제품의 문서화에는 적합할지 몰라도 포스팅을 추가하는데는 약간 부적당하다는 걸 깨달았다.\n\n사이드바에 매료되어 다운로드 했지만, 사이드바를 활용하기 위해서는 정적인 페이지 설정이 필요해서 노트를 추가할 때마다 사이드바에 나타나는 기능은 지원되지 않았다.  결국, 이 템플릿의 blog에 해당되는 단순한 메뉴만 쓸 수 있는데다가, 그 메뉴조차도 파일명을 날짜로 시작해야한다는 제약이 있었다.  \n\n더욱 안좋은 것은, 이 메뉴에서는 사이드바가 없다는 점이다.  물론 다른 메뉴의 구현을 참고해서 사이드바를 만드는 것도 가능할 수 있지만, 다른 메뉴는 미리 페이지 정보를 만들어 두는 방식이라서 새롭게 만드는 노트를 적는 방법은 없는 것 같다.\n\n템플릿을 바꿔야 할 것 같다..\n\n\n### 깃북 형태\n\n여러 가지 템플릿을 찾아본 결과 [Jekyll Gitbook](https://sighingnow.github.io/jekyll-gitbook/)이라는 템플릿이 가장 마음에 든다. \n\n- 커서를 링크에 가져갔을 때 나타나는 링크 프리뷰가 안되고\n- 백링크가 없고\n- 옵시디언의 그래프가 지원되지 않는다는 단점은 있지만..\n\nMy ditital garden 템플릿에는 사이드바가 없고,  Gitbook 템플릿에는 프리뷰와 그래프가 없다..\n\n\u003e My digital garden 추가 희망 사항 :\n\u003e 사이드바\n\u003e 다크모드\n\n\u003e Gitbook에서 추가 희망 사항 :\n\u003e 백 링크\n\u003e 그래프\n\n\n그러고보면 그냥 My digital garden에서 시작하는 쪽이 더 나을 수도 있다는 생각도 든다.\n\n\n### Just the Docs 템플릿\n\n주말에 지킬 템플릿을 좀 더 찾아보다가 괜찮아 보이는 템플릿을 발견했다.\n일단 깃허브에 복사하고 클론해서 가져왔다.\n\n돌려봤는데 잘 안돼서 루비 초기 설치 과정을 다시 진행하고 로컬 서버를 띄웠더니 서버는 돌아간다.  경로 설정이 달라서 에러는 났지만 테스트를 해보기로 한다.\n\n#####   \\_config.yml\n\ntitle: --\u003e My Little Forest\nurl: --\u003e https://127.0.0.1\nrepository --\u003e ./just-the-docs\n\n테스트 결과, 역시 노트 파일 자체를 편집해야하는 제약이 있다.\n",
    "lastmodified": "2023-02-22T14:17:07.993594+09:00",
    "tags": null
  },
  "/my-little-forest/2.-%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%B0%9C%EC%A0%84%EC%9D%84-%EC%9C%84%ED%95%B4/BuildingTemplate/%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%A7%8C%EB%93%A4%EA%B8%B04-Next.js": {
    "title": "Untitled Page",
    "content": "---\ntitle:  {\"title\"}\ndate: \"2023-02-21 14:33:06 \"\ntags: \naliases: \n---\n### 다시 Mindstone으로\n\n결국 다시 Mindstone으로 돌아왔다.\n로컬서버에 돌리기 위해서\n\n    $ npm install --global yarn\n\n\n\n이번에는 제대로 기초부터 스터디해 나갈 생각이다.\n이 템플릿은 Next.js 기반이므로 일단 Next.js를 공부한다.\n\n### 설치\n\n일단 설치를 한다 :\n\n    $ npx create-next-app my-litte-forest --use-npm\n\n    $ cd my-little-forest\n\n    $ ls\n    README.md      next.config.js  package-lock.json  pages/   styles/\n    next-env.d.ts  node_modules/   package.json       public/  tsconfig.json\n\n이제 VS code로 열어본다 :\n\n    $ code .\n\n![[vs-code-new-wksp.png]]\n\nVS code의 내부 터미널을 열고 서버를 띄워 본다 :\n\n    npm run dev\n\n![[vc-code-run-dev.png]]\n\n기본 페이지가 뜨는데, 아이콘은 public 폴더안에 있다.\n특히 favicon.ico는 크롬 탭에 보이는 아이콘인 것 같다.\n\n![[fabicon-image.png]]\n\n\n### 유레카!\n\n딱 나에게 필요한 템플릿을 찾았다!\nHugo라는 프레임워크를 이용해 만들어진 [Amethyst](https://amethyst.bencuan.me/)\n라는 템플릿이다. \n\n그래서 템플릿 찾기의 긴 여정(?, 방황)을 끝내고 아메씨스트로 정착하기로 한다. [[아메시스트 템플릿 ]]\n\n",
    "lastmodified": "2023-02-23T09:01:17.061578+09:00",
    "tags": null
  },
  "/my-little-forest/2.-%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%B0%9C%EC%A0%84%EC%9D%84-%EC%9C%84%ED%95%B4/Flutter/": {
    "title": "Flutter",
    "content": "\n",
    "lastmodified": "2023-02-22T13:54:40.4465093+09:00",
    "tags": null
  },
  "/my-little-forest/2.-%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%B0%9C%EC%A0%84%EC%9D%84-%EC%9C%84%ED%95%B4/Git-%EB%AA%85%EB%A0%B9%EC%96%B4": {
    "title": "Untitled Page",
    "content": "---\ntitle:  {\"title\"}\ndate: \"2023-02-21 14:34:44 \"\ntags: \naliases:\n---\n\n### remote repository의 폴더 삭제 방법 \n(ignore 부분이 한번 복사된 경우 리모트만 삭제하기):\n\n##### 기초작업\n1. git bash open\n\n2. 터미널 내에서 git repo가 있는 folder로 이동, \n\n       $ cd f:/home/obsidian/repo_name)\n\n3. 초기화 상태\n\n       $ git init\n\n4. 현재 상태 확인\n\n       $ git config --list\n\n5. 필요하면 사용자 설정 입력 \n\n       $  git config --global user.name \"username\")\n   \n6. 연결상태 확인 : \n   \n       $ git remote -v\n\n##### 삭제작업\n\n7.    먼저 리모트에 존재하는 디렉토리를 지운다.    \n\n     $ git rm -r --cached  \"first_directory_under_repo_root/second_director/dir_to_be_removed\"  \n   \n   (여기서 첫번째 디렉토리란 repo 이름은 빼고 그 다음에 나오는 디렉토리를 의미. \n   예를들면..  \n   내 Vault가 my_vault이고 일기/비밀일기 라는 폴더가 잘못 올라갔다면..  \n   $ git rm -r --cached  \"posts/my_vault/일기/비밀일기\" 로 지운다는 뜻이다.  \n   -r option은 recursive,  하위폴더의 내용도 모두 지운다는 뜻  \n   --cached는 remote.  --cached가 없으면 local에서 삭제됨)  \n\n\n8.     다음으로 커밋과 푸시로 적용한다\n\n    $ git commit -am 'dir_to_be_removed removed from the repo'  \n    $ git push \n\n\n\n### git submodule\n\nGit 저장소 안에 다른 Git 저장소를 디렉토리로 분리해 넣는 것\n템플릿 내에 존재하는 옵시디언 볼트를 별도로 관리하기 위해 필요한 개념이다.\n\n\n\n\n\n\n\n### git checkout  \ngit branch 명령에 의해 생성 된 지점 사이를 이동하는 명령. 내가 사용할 브랜치를 지정하는 것.\n\n#테크니컬팁",
    "lastmodified": "2023-02-22T14:17:33.5630312+09:00",
    "tags": null
  },
  "/my-little-forest/2.-%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%B0%9C%EC%A0%84%EC%9D%84-%EC%9C%84%ED%95%B4/JavaScript-Frameworks": {
    "title": "Untitled Page",
    "content": "---\ntitle:  {\"title\"}\ndate: \"2023-02-21 14:34:50 \"\ntags: \naliases:\n---\n\n## Top 9 JavaScript Frameworks \nhttps://ninetailed.io/blog/best-javascript-frameworks/ 발췌번역\n\n### 프론트엔드 용\n\n1. React\\\nUI를 만드는 가장 인기있는 자바스크립트 프레임워크.  Facebook에 의해 유지됨\n\n2. Vue\\\nSPA (Single-page application)와 UI를 만드는 JSF.  매우 가볍고 배우기 쉬운 편\n   \n3. Ember.js\\\n웹 개발을 더 생산적이고 즐겁게 하기 위한 툴셋을 제공하자는 철학하에 만들어짐.  \n   \n4. Next.js\\\n프론트엔드 용으로 개발되었지만 서버쪽 렌더링이나 범용 앱 개발에도 쓸 수 있다.  옵시디언 템플릿 개발을 위해서 좀 더 자세히 알아본다.  [[Next.js]]\n   \n5. Angular\\\n강력한 JS 기반 웹개발 프레임워크.  MVC(Model View Controller) 구조를 기초로 만들어 졌기 때문에 동적 웹 앱개발을 쉽게 해 준다.  다른 프레임웍에 비해서는 좀 복잡한 편이다.\n\n### 백엔드 용\n   \n6. Node.js\\\nNode.js는 서버 사이드 앱 개발을 위한 실행 환경이다.  2009년 개발되었고 현재 가장 인기있는 JSF가 되었다. \n   \n7. Backbone.js\\\nMVP (Model-View-Presenter) 구조와 웹 앱의 동기화를 제공하는 JS 라이브러리이다.  MVC 디자인 패턴에 기반하고 있고, SPA 제작에서 가장 인기있다.\n   \n8. Meteor.js\\\n웹 앱 개발을 위한 JS 기반의 플랫폼이다.  오픈 소스이고, 객체지향 기능, 이벤트 드리븐 프로그래밍 등 여러 프로그래밍 기법을 지원한다.  Node.js를 기반으로 하는 비동기화 프로그래밍 모델을 사용한다.\n   \n9. Express.js\\\nNode.js를 위한 웹 앱 프레임워크이고, MIT 라이센스이다.  웹 앱과 API 개발을 위해 설계되었다. \n\n#기술일반 ",
    "lastmodified": "2023-02-22T14:33:12.3417835+09:00",
    "tags": null
  },
  "/my-little-forest/2.-%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%B0%9C%EC%A0%84%EC%9D%84-%EC%9C%84%ED%95%B4/Markdown-%EB%AC%B8%EB%B2%95": {
    "title": "Untitled Page",
    "content": "---\ntitle:  {\"title\"}\ndate: \"2023-02-21 14:35:02 \"\ntags: \naliases:\n---\n\n### 강제 줄바꿈 : \n리스트내에서는 분명히 줄을 바꿨는데 퍼블리시 해 보면 여러 줄이 계속 뒤로 붙어서 보인다.  명시적으로 줄바꿈을 표시해야만 하고,  방법은 줄 끝에 블랭크 2개를 넣거나 백슬래시를 넣는 두 가지가 있다. \n\nNetlify에서 테스트해보니 둘다 됐다.  백슬래시가 줄바꿈을 넣었는지 확인하기 쉬우므로 백슬래시로 쓰자.  (*백슬래시 뒤에는 블랭크가 없어야 함!*)\n\n### 수평선 그리기 :  \n\n3개 이상 연속된 하이픈, 아스터리스크, 언더스코어\n그런데, 이것을 넣고 netlify에 퍼블리시하면 표준이 다른지 문서 앞쪽이 잘려버림.  해서 쓰지 않기로.\n\n\n\n### 이미지 링크 :\n\u003cimg src=\"./../../images/image.jpg\"/\u003e\n\n\u003cimg src=\"/assets/image.jpg\"/\u003e\n\n\u003cimg src=\"../images/image.jpg\"/\u003e\n\n![[image.jpg]]\n#테크니컬팁",
    "lastmodified": "2023-02-22T14:39:31.1033433+09:00",
    "tags": null
  },
  "/my-little-forest/2.-%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%B0%9C%EC%A0%84%EC%9D%84-%EC%9C%84%ED%95%B4/Next.js": {
    "title": "Untitled Page",
    "content": "---\ntitle:  {\"title\"}\ndate: \"2023-02-21 14:35:07 \"\ntags: \naliases:\n---\n\n### 개요 \n\n- Vercel이 만든 open source React front-end framework\n- UI와 정적 웹사이트를 만들 때 사용된다.\n- 서버 사이드의 rendering 이나 범용 앱에도 사용가능\n- UI를 생성하는데 JS와 React component를 사용\n- 다른 프레임워크와 차별되는 특징은 페이지의 자동 생성 \\\n  프로젝트의 파일 구성에 의거해서 만들어짐\\\n  예를 들어, root 밑에 '\\_posts' 라는 폴더가 있다면, Next.js는 폴더 내에 있는 각 markdown 파일을 위한 페이지를 만든다.\n- 이 기능은 필요한 페이지를 수동으로 만들 필요가 없어져서 개발 시간을 줄여준다.\n- 새로운 컨텐트가 추가될 때마다 자동으로 페이지를 생성해 내는 기능도 특별하다\n\n\n### 장점\n\n- 동적 기능을 포함하는 정적 웹사이트를 빠르게 만들 수 있다.\n- 서버 사이드 rendering과 정적 웹사이트 생성 기능을 제공하기 때문에 SEO (Search Engine Optimization)에 탁월하다\n- 스크린 사이즈와 무관하게 좋아 보이는 디자인을 보여준다.\n\n### 단점\n\n- 플러그인이 적다\n- 라우팅 제약이 있다.\n- 앱에 페이지가 많아지면 빌드시간이 매우 오래 걸린다.\n\n### 주요 기능들\n##### Pages : \nNext의 file routing system을 이용해서 페이지를 생성하고 이동할 수 있다.  File routing system을 이용하기 위해서는 'pages/first-post.js'를 만든다.  최초의 route는 통상 'pages/index.js'와 연관되어 있다.\n\n##### 이미지 최적화 :\n이미지 컴포넌트는 HTML 요소 'img'를 현대 웹을 위해 개선하고 확장한 개념이다.  디바이스와 무관하게 이미지 크기를 변경하고, 이미지가 보여야 하는 경우에만 이미지를 로드하게 해 준다.\n\n##### TypeScript 지원 :\nNext.js는 기존 또는 신규 프로젝트에 모두 TypeScript를 통합할 수 있다.  특히 새로운 프로젝트를 만들 때는 TypeScript를 위해 어떤 설정도 할 필요가 없다.\n\n##### 지원 브라우저 :\nIE11을 포함해서 모든 현대 브라우저 지원가능하다. \n\n##### 데이터 가져오기 :\nNext.js에는 두가지 렌더링이 가능하다.\n1. Static Generation : \\\n   빌드할 때 HTML 페이지가 생성되고, CDN이 캐시되고, 요청될 때 이미 빌드된다.\n2. Server-side Rendering :\\\n   이 경우, 동적 페이지가 생성되고 요청시마다 render된다.\n\n##### 레이아웃 :\n만일 Navbar와 Footer가 매 페이지마다 필요하다면 이것을 매 페이지마다 넣을 필요가 없다.  Next는 페이지를 컴포넌트로 만들게 해준다.  Navbar와 Footer를 컴포넌트로 wrapping 하면 된다.\n\n\n\n### 좀더 찾아볼 주제 :\nJavaScript와 TypeScript\n\n#기술일반\n",
    "lastmodified": "2023-02-22T14:17:49.3909832+09:00",
    "tags": null
  },
  "/my-little-forest/2.-%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%B0%9C%EC%A0%84%EC%9D%84-%EC%9C%84%ED%95%B4/VS-Code": {
    "title": "Untitled Page",
    "content": "---\ntitle:  {\"title\"}\ndate: \"2023-02-21 14:35:11 \"\ntags: \naliases:\n---\n\n### hotkeys\n\nMarketplace 열기 :  `Ctrl+Shift+X` (or `Cmd+Shift+X` on a Mac)\n\n\n### 플러그인이나 테마 추가하기\n1. Marketplace에서 원하는 extension을 설치한다.\n2. 내 프로젝트에 플러그인을 추가한다 :  프로젝트 루트에 있는 '\\_config.yml' 파일에 추가한다.\n3. ",
    "lastmodified": "2023-02-22T14:18:02.916091+09:00",
    "tags": null
  },
  "/my-little-forest/3.-%EC%83%9D%ED%99%9C/": {
    "title": "생활",
    "content": "\n",
    "lastmodified": "2023-02-22T13:54:09.4809642+09:00",
    "tags": null
  },
  "/my-little-forest/3.-%EC%83%9D%ED%99%9C/%EC%82%AC%EC%86%8C%ED%95%98%EC%A7%80%EB%A7%8C-%EC%A4%91%EC%9A%94%ED%95%9C-%EC%8A%B5%EA%B4%80%EB%93%A4-%EB%AA%A8%EC%9D%8C": {
    "title": "Untitled Page",
    "content": "---\ntitle: {\"title\"}\ndate: 2023-02-22\ntags: \naliases: \n---\n\n### 손씻을 때 \n- 비누칠하는 동안 물을 꺼 둔다.  나름 지구 사랑의 한 방법.\n- 물은 즉시 말리고 핸드크림을 꼭 바른다.  건조하고 갈라지는 걸 방지할 수 있다.\n\n### 건강하고 다치지 않는 신체를 갖기 위한 습관\n- 매일 아침 10분 스트레칭 + 7분 운동: \\\n      어제 가능했던 동작이 오늘 가능하지 않을 수 없다.\n- 매일 저녁 20분 전신 운동: \\\n      매우 피곤하거나 감기 기운으로 컨디션이 안 좋은 날을 제외하고 매일 운동하기\\\n      주말에는 좀 더 길게 운동하기\n\n\n#생활팁\n",
    "lastmodified": "2023-02-22T14:07:13.1585706+09:00",
    "tags": null
  },
  "/my-little-forest/4.-%EC%98%81%EC%96%B4%EA%B3%B5%EB%B6%80/": {
    "title": "영어 공부",
    "content": "\n",
    "lastmodified": "2023-02-22T13:54:24.4457447+09:00",
    "tags": null
  },
  "/my-little-forest/4.-%EC%98%81%EC%96%B4%EA%B3%B5%EB%B6%80/%EB%8B%A8%EC%96%B4-%EA%B3%B5%EB%B6%80": {
    "title": "Untitled Page",
    "content": "---\ntitle:  {\"title\"}\ndate: 2023-02-21 14:35:16 \ntags: \naliases:\n---\n# 단어 공부 \n\n### 2023-02-16 19:39:17 \n\n### 키워드 : 암기의 원리\n\n### 한줄요약 : 단어에 상황 이미지를 상상하고 그 상황을 묘사하는 문장으로 외운다. \n\n\n### 처음 단어를 보았을 때 외우기\n\n1. 외울 단어에 대하여 상황 이미지를 연상하고 연상된 단어를 한글로 단어장에 쓰기\n2. 해당 상황을 묘사하는 문장을 통째로 외운다.\n3. 이미지를 5개씩 만든다.  (즉 한번에 5개 단어씩 외우기)\\\n   예: \\\n   look into - 현미경, She is looking into a microscope.\\\n   switch on - 컴퓨터, She is switching on her computer.\\\n   display case - 안경, He is putting glasses in the display case.\\\n   trim - 정원사, He is trimming the tree.\\\n4. 이런 5개 이미지를 공부하는데 5분정도 걸리므로 하루 8패키지\n\n\n### 효과적으로 반복해서 각인 시키기\n1. 공부할 때 한번 (40분)\n2. 공부한 직후에 한번 (10분)\n3. 자기 전에 한번 (10분)\n4. 다음 날 아침에 한번 (10분)\n\n\n### 못외운 단어의 효과적 처리\n\n바로 직후에 하지 말고 일주일 정도 모아서 다시 외우는 것이 더욱 효과적이다.\n망각은 계속 작동하지만, 이런 방법으로 각인시키면 상당부분 기억에 남는다.\n\ntags:: #status/note책을 ",
    "lastmodified": "2023-02-22T14:18:09.4469137+09:00",
    "tags": null
  },
  "/my-little-forest/4.-%EC%98%81%EC%96%B4%EA%B3%B5%EB%B6%80/%EC%98%81%EC%96%B4-%EA%B3%B5%EB%B6%80-%EB%B0%A9%ED%96%A5": {
    "title": "Untitled Page",
    "content": "---\ntitle:  {\"title\"}\ndate: 2023-02-21 14:35:21 \ntags: \naliases:\n---\n# 영어 공부 방향 \n\n### 2023-02-16 19:33:51 \n\n### 키워드 : 어휘력\n\n### 한줄 요약 : 김교수 암기법에 따라 매일 20개의 단어를 외운다\n\ntags:: #영어공부",
    "lastmodified": "2023-02-22T14:18:12.6147703+09:00",
    "tags": null
  },
  "/my-little-forest/4.-%EC%98%81%EC%96%B4%EA%B3%B5%EB%B6%80/%EC%98%81%EC%96%B4-%EB%A7%90%ED%95%98%EA%B8%B0-%EC%98%81%EC%83%81": {
    "title": "Untitled Page",
    "content": "---\ntitle:  {\"title\"}\ndate: 2023-02-21 14:35:27 \ntags: \naliases:\n---\n",
    "lastmodified": "2023-02-22T14:18:17.7203746+09:00",
    "tags": null
  },
  "/my-little-forest/templates/footer-template": {
    "title": "",
    "content": "#ellies\n",
    "lastmodified": "2023-02-23T09:34:24.0476269+09:00",
    "tags": null
  },
  "/my-little-forest/templates/frontmatter-template": {
    "title": "Untitled Page",
    "content": "---\ntitle: {\"title\"}\ndate: {YYYY-mm-DD}\ntags: \naliases: \n---\n\n",
    "lastmodified": "2023-02-23T09:31:17.6103762+09:00",
    "tags": null
  }
}